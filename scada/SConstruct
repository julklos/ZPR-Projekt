import platform, shutil, os

def copyLibBuilder( target, source, env):
   '''kopiuje biblioteke'''
   shutil.copy( str(source[0]), str(target[0]) )
   return

BOOST_CPPPATH = os.environ['BOOST_CPPPATH']
PQXX_CPPPATH = os.environ['PQXX_CPPPATH']
PYTHON_CPPPATH = os.environ['PYTHON_CPPPATH']

BOOST_LIBPATH = os.environ['BOOST_LIBPATH']
PQXX_LIBPATH = os.environ['PQXX_LIBPATH']
PYTHON_LIBPATH = os.environ['PYTHON_LIBPATH']

if(platform.system() == "Linux"):
    VariantDir(BUILD_DIR, SRC_DIR, duplicate=0)
    e = Environment(TARGET_ARCH='x86')

    INCLUDE_DIR = "./include"
    BUILD_DIR = './build/'
    SRC_DIR = "./src"
    sources = [Glob(BUILD_DIR + '*.cpp'),
               Glob(BUILD_DIR + 'utilities\\*.cpp'), 
               Glob(BUILD_DIR + 'controllers\\*.cpp'),
               Glob(BUILD_DIR + 'mappers\\*.cpp'),
               Glob(BUILD_DIR + 'services\\*.cpp')]

    e.Append( CPPFLAGS = '-Wall -pedantic -pthread -Wno-long-long -shared -Wextra' )
    e.Append( LINKFLAGS = '-Wall -pthread' )
    e.Append( CPPPATH = [INCLUDE_DIR,
                         BOOST_CPPPATH,
                         PQXX_CPPPATH,
                         PYTHON_CPPPATH] )


    
    e.Append( LIBPATH = ['.',
                         BOOST_LIBPATH,
                         PQXX_LIBPATH,
                         PYTHON_LIBPATH] )
                         

    e.Append( LIBS = [ 'boost_python36', 
        # 'boost_system', 
    'boost_date_time', 'pqxx' ] )

    target = 'scada.so'

elif(platform.system() == "Windows"):
    SRC_DIR = ".\\src"
    INCLUDE_DIR = '.\\include'
    BUILD_DIR = '.\\build'
    
    e = Environment(TARGET_ARCH='x86')
    VariantDir(BUILD_DIR, SRC_DIR, duplicate=0)
    e.Append( CPPFLAGS = ' /EHsc /D "WIN32" /D "_WIN32_WINNT#0x501" /D "_CONSOLE" /W4 /MD /EXPORTS' )
    e.Append( LINKFLAGS = ' /MACHINE:x86 /NOENTRY ' )

    
    sources = [Glob(BUILD_DIR + '*.cpp'),
               Glob(BUILD_DIR + 'utilities\\*.cpp'), 
               Glob(BUILD_DIR + 'controllers\\*.cpp'),
               Glob(BUILD_DIR + 'mappers\\*.cpp'),
               Glob(BUILD_DIR + 'services\\*.cpp')
    ]
   
    e.Append( CPPPATH = [ INCLUDE_DIR, 
                            BOOST_CPPPATH, 
                            PQXX_CPPPATH, 
                            PYTHON_CPPPATH 
                            ] )
    e.Append( LIBPATH = [   BOOST_LIBPATH, 
                            PQXX_LIBPATH, 
                            PYTHON_LIBPATH 
                            ] )

    e.Append(LIBS = [
        'libboost_python36-vc142-mt-x32-1_70', 
        'libboost_date_time-vc142-mt-x32-1_70',
        'libpqxx','libpq',
        'python36'
        ])

    target = 'libscada.pyd'
    
else:
    print(platform.system() + " not supported")

dll = e.SharedLibrary(target = 'scada', source = sources)
e.Command(target, dll, copyLibBuilder)


#build tests
env_test = Environment(TARGET_ARCH='x86')

if(platform.system() == "Linux"):
    env_test.Append( CPPPATH = [ INCLUDE_DIR, 
                            BOOST_CPPPATH, 
                            PQXX_CPPPATH, 
                            PYTHON_CPPPATH 
                            ] )
    e.Append( LIBPATH = [   BOOST_LIBPATH, 
                            PQXX_LIBPATH, 
                            PYTHON_LIBPATH 
                            ] )
    env_test.Append( LIBS = [ 'scada',  'python3.6m', 'boost_unit_test_framework'] )
    env_test.Program( target = "__tests__/scada_test", source = '__tests__/scada_test.cpp')
   
elif(platform.system() == "Windows"):
    env_test.Append( CPPFLAGS = ' /EHsc /D "WIN32" /D "_WIN32_WINNT#0x501" /D "_CONSOLE" /W4 /MD' )
    env_test.Append( CPPPATH = [ INCLUDE_DIR, 
                            BOOST_CPPPATH, 
                            PQXX_CPPPATH, 
                            PYTHON_CPPPATH 
                            ] )
    env_test.Append( LIBPATH = [  '.', BOOST_LIBPATH, 
                            PQXX_LIBPATH, 
                            PYTHON_LIBPATH 
                            ] )                        
    env_test.Append( LIBS = [ 'scada', 'libboost_unit_test_framework-vc142-mt-x32-1_70'] )
    env_test.Program( target = "__tests__/scada_test", source = '__tests__/scada_test.cpp')
   
