import platform, shutil

INCLUDE_DIR = "./include"
BUILD_DIR = "./build/"
SRC_DIR = "./src/"

VariantDir(BUILD_DIR, SRC_DIR, duplicate=0)
e = Environment(TARGET_ARCH='x86')

sources = [Glob(BUILD_DIR + '*.cpp'),
           Glob(BUILD_DIR + 'utilities/*.cpp'), 
           Glob(BUILD_DIR + 'controllers/*.cpp'),
           Glob(BUILD_DIR + 'mappers/*.cpp'),
           Glob(BUILD_DIR + 'services/*.cpp')]

if(platform.system() == "Linux"):
    e.Append( CPPFLAGS = '-Wall -pedantic -pthread -Wno-long-long -shared -Wextra' )
    e.Append( LINKFLAGS = '-Wall -pthread' )
    e.Append( CPPPATH = ['/usr/include/python3.6', 
                         '/usr/include',
                         'libs/boost', 
                         'libs/pqxx/install',
                         INCLUDE_DIR] )

    e.Append( LIBPATH = ['.',
                         '/usr/lib/python3.6',
                         '/usr/lib',
                         #'libs/boost',
                         #'libs/boost/stage',
                         #'libs/boost/stage/lib',
                         'libs/pqxx/install/lib'] )

    e.Append( LIBS = [ 'boost_python36', 'boost_system', 'boost_date_time', 'pqxx' ] )

    target = 'scada.so'

elif(platform.system() == "Windows"):
    VariantDir(BUILD_DIR, SRC_DIR, duplicate=0)
    e = Environment()

    e.Append( CPPFLAGS = ' /EHsc /D "WIN32" /D "_WIN32_WINNT#0x501" /D "_CONSOLE" /W4 /MD' )
    e.Append( CPPPATH = [ 'c:/Boost/include/boost-1_63', 'C:/Python27/include' ] )
    e.Append( LIBPATH = [ 'C:/Boost/lib', 'C:/Python27/libs' ] )

    target = 'hello.pyd'
    
else:
    print platform.system() + " not supported"

dll = e.SharedLibrary(target = 'scada', source = sources)


#build tests
env_test = e.Clone()

if(platform.system() == "Linux"):
   env_test.Append( LIBS = [ 'scada',  'python3.6m', 'boost_unit_test_framework'] )
   #env_test.Prepend( LIBS = 'scada' )

elif(platform.system() == "Windows"):
   env_test.Prepend( LIBS = 'scada' )

env_test.Program( target = "__tests__/scada_test", source = '__tests__/scada_test.cpp')



